// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2014 20:47:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Submatrix
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Submatrix_vlg_sample_tst(
	clock,
	encrypted,
	loaded,
	processed,
	resetN,
	submatrixInput,
	sampler_tx
);
input  clock;
input  encrypted;
input  loaded;
input  processed;
input  resetN;
input [15:0] submatrixInput;
output sampler_tx;

reg sample;
time current_time;
always @(clock or encrypted or loaded or processed or resetN or submatrixInput)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Submatrix_vlg_check_tst (
	readyToBeEncrypted,
	readyToBeLoaded,
	readyToBeProcessed,
	submatrixOutput,
	sampler_rx
);
input  readyToBeEncrypted;
input  readyToBeLoaded;
input  readyToBeProcessed;
input [15:0] submatrixOutput;
input sampler_rx;

reg  readyToBeEncrypted_expected;
reg  readyToBeLoaded_expected;
reg  readyToBeProcessed_expected;
reg [15:0] submatrixOutput_expected;

reg  readyToBeEncrypted_prev;
reg  readyToBeLoaded_prev;
reg  readyToBeProcessed_prev;
reg [15:0] submatrixOutput_prev;

reg  readyToBeEncrypted_expected_prev;
reg  readyToBeLoaded_expected_prev;
reg  readyToBeProcessed_expected_prev;
reg [15:0] submatrixOutput_expected_prev;

reg  last_readyToBeEncrypted_exp;
reg  last_readyToBeLoaded_exp;
reg  last_readyToBeProcessed_exp;
reg [15:0] last_submatrixOutput_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	readyToBeEncrypted_prev = readyToBeEncrypted;
	readyToBeLoaded_prev = readyToBeLoaded;
	readyToBeProcessed_prev = readyToBeProcessed;
	submatrixOutput_prev = submatrixOutput;
end

// update expected /o prevs

always @(trigger)
begin
	readyToBeEncrypted_expected_prev = readyToBeEncrypted_expected;
	readyToBeLoaded_expected_prev = readyToBeLoaded_expected;
	readyToBeProcessed_expected_prev = readyToBeProcessed_expected;
	submatrixOutput_expected_prev = submatrixOutput_expected;
end


// expected submatrixOutput[ 15 ]
initial
begin
	submatrixOutput_expected[15] = 1'bX;
end 
// expected submatrixOutput[ 14 ]
initial
begin
	submatrixOutput_expected[14] = 1'bX;
end 
// expected submatrixOutput[ 13 ]
initial
begin
	submatrixOutput_expected[13] = 1'bX;
end 
// expected submatrixOutput[ 12 ]
initial
begin
	submatrixOutput_expected[12] = 1'bX;
end 
// expected submatrixOutput[ 11 ]
initial
begin
	submatrixOutput_expected[11] = 1'bX;
end 
// expected submatrixOutput[ 10 ]
initial
begin
	submatrixOutput_expected[10] = 1'bX;
end 
// expected submatrixOutput[ 9 ]
initial
begin
	submatrixOutput_expected[9] = 1'bX;
end 
// expected submatrixOutput[ 8 ]
initial
begin
	submatrixOutput_expected[8] = 1'bX;
end 
// expected submatrixOutput[ 7 ]
initial
begin
	submatrixOutput_expected[7] = 1'bX;
end 
// expected submatrixOutput[ 6 ]
initial
begin
	submatrixOutput_expected[6] = 1'bX;
end 
// expected submatrixOutput[ 5 ]
initial
begin
	submatrixOutput_expected[5] = 1'bX;
end 
// expected submatrixOutput[ 4 ]
initial
begin
	submatrixOutput_expected[4] = 1'bX;
end 
// expected submatrixOutput[ 3 ]
initial
begin
	submatrixOutput_expected[3] = 1'bX;
end 
// expected submatrixOutput[ 2 ]
initial
begin
	submatrixOutput_expected[2] = 1'bX;
end 
// expected submatrixOutput[ 1 ]
initial
begin
	submatrixOutput_expected[1] = 1'bX;
end 
// expected submatrixOutput[ 0 ]
initial
begin
	submatrixOutput_expected[0] = 1'bX;
end 

// expected readyToBeEncrypted
initial
begin
	readyToBeEncrypted_expected = 1'bX;
end 

// expected readyToBeLoaded
initial
begin
	readyToBeLoaded_expected = 1'bX;
end 

// expected readyToBeProcessed
initial
begin
	readyToBeProcessed_expected = 1'bX;
end 
// generate trigger
always @(readyToBeEncrypted_expected or readyToBeEncrypted or readyToBeLoaded_expected or readyToBeLoaded or readyToBeProcessed_expected or readyToBeProcessed or submatrixOutput_expected or submatrixOutput)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected readyToBeEncrypted = %b | expected readyToBeLoaded = %b | expected readyToBeProcessed = %b | expected submatrixOutput = %b | ",readyToBeEncrypted_expected_prev,readyToBeLoaded_expected_prev,readyToBeProcessed_expected_prev,submatrixOutput_expected_prev);
	$display("| real readyToBeEncrypted = %b | real readyToBeLoaded = %b | real readyToBeProcessed = %b | real submatrixOutput = %b | ",readyToBeEncrypted_prev,readyToBeLoaded_prev,readyToBeProcessed_prev,submatrixOutput_prev);
`endif
	if (
		( readyToBeEncrypted_expected_prev !== 1'bx ) && ( readyToBeEncrypted_prev !== readyToBeEncrypted_expected_prev )
		&& ((readyToBeEncrypted_expected_prev !== last_readyToBeEncrypted_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readyToBeEncrypted :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readyToBeEncrypted_expected_prev);
		$display ("     Real value = %b", readyToBeEncrypted_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readyToBeEncrypted_exp = readyToBeEncrypted_expected_prev;
	end
	if (
		( readyToBeLoaded_expected_prev !== 1'bx ) && ( readyToBeLoaded_prev !== readyToBeLoaded_expected_prev )
		&& ((readyToBeLoaded_expected_prev !== last_readyToBeLoaded_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readyToBeLoaded :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readyToBeLoaded_expected_prev);
		$display ("     Real value = %b", readyToBeLoaded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_readyToBeLoaded_exp = readyToBeLoaded_expected_prev;
	end
	if (
		( readyToBeProcessed_expected_prev !== 1'bx ) && ( readyToBeProcessed_prev !== readyToBeProcessed_expected_prev )
		&& ((readyToBeProcessed_expected_prev !== last_readyToBeProcessed_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readyToBeProcessed :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readyToBeProcessed_expected_prev);
		$display ("     Real value = %b", readyToBeProcessed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_readyToBeProcessed_exp = readyToBeProcessed_expected_prev;
	end
	if (
		( submatrixOutput_expected_prev[0] !== 1'bx ) && ( submatrixOutput_prev[0] !== submatrixOutput_expected_prev[0] )
		&& ((submatrixOutput_expected_prev[0] !== last_submatrixOutput_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[0] = submatrixOutput_expected_prev[0];
	end
	if (
		( submatrixOutput_expected_prev[1] !== 1'bx ) && ( submatrixOutput_prev[1] !== submatrixOutput_expected_prev[1] )
		&& ((submatrixOutput_expected_prev[1] !== last_submatrixOutput_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[1] = submatrixOutput_expected_prev[1];
	end
	if (
		( submatrixOutput_expected_prev[2] !== 1'bx ) && ( submatrixOutput_prev[2] !== submatrixOutput_expected_prev[2] )
		&& ((submatrixOutput_expected_prev[2] !== last_submatrixOutput_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[2] = submatrixOutput_expected_prev[2];
	end
	if (
		( submatrixOutput_expected_prev[3] !== 1'bx ) && ( submatrixOutput_prev[3] !== submatrixOutput_expected_prev[3] )
		&& ((submatrixOutput_expected_prev[3] !== last_submatrixOutput_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[3] = submatrixOutput_expected_prev[3];
	end
	if (
		( submatrixOutput_expected_prev[4] !== 1'bx ) && ( submatrixOutput_prev[4] !== submatrixOutput_expected_prev[4] )
		&& ((submatrixOutput_expected_prev[4] !== last_submatrixOutput_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[4] = submatrixOutput_expected_prev[4];
	end
	if (
		( submatrixOutput_expected_prev[5] !== 1'bx ) && ( submatrixOutput_prev[5] !== submatrixOutput_expected_prev[5] )
		&& ((submatrixOutput_expected_prev[5] !== last_submatrixOutput_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[5] = submatrixOutput_expected_prev[5];
	end
	if (
		( submatrixOutput_expected_prev[6] !== 1'bx ) && ( submatrixOutput_prev[6] !== submatrixOutput_expected_prev[6] )
		&& ((submatrixOutput_expected_prev[6] !== last_submatrixOutput_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[6] = submatrixOutput_expected_prev[6];
	end
	if (
		( submatrixOutput_expected_prev[7] !== 1'bx ) && ( submatrixOutput_prev[7] !== submatrixOutput_expected_prev[7] )
		&& ((submatrixOutput_expected_prev[7] !== last_submatrixOutput_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[7] = submatrixOutput_expected_prev[7];
	end
	if (
		( submatrixOutput_expected_prev[8] !== 1'bx ) && ( submatrixOutput_prev[8] !== submatrixOutput_expected_prev[8] )
		&& ((submatrixOutput_expected_prev[8] !== last_submatrixOutput_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[8] = submatrixOutput_expected_prev[8];
	end
	if (
		( submatrixOutput_expected_prev[9] !== 1'bx ) && ( submatrixOutput_prev[9] !== submatrixOutput_expected_prev[9] )
		&& ((submatrixOutput_expected_prev[9] !== last_submatrixOutput_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[9] = submatrixOutput_expected_prev[9];
	end
	if (
		( submatrixOutput_expected_prev[10] !== 1'bx ) && ( submatrixOutput_prev[10] !== submatrixOutput_expected_prev[10] )
		&& ((submatrixOutput_expected_prev[10] !== last_submatrixOutput_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[10] = submatrixOutput_expected_prev[10];
	end
	if (
		( submatrixOutput_expected_prev[11] !== 1'bx ) && ( submatrixOutput_prev[11] !== submatrixOutput_expected_prev[11] )
		&& ((submatrixOutput_expected_prev[11] !== last_submatrixOutput_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[11] = submatrixOutput_expected_prev[11];
	end
	if (
		( submatrixOutput_expected_prev[12] !== 1'bx ) && ( submatrixOutput_prev[12] !== submatrixOutput_expected_prev[12] )
		&& ((submatrixOutput_expected_prev[12] !== last_submatrixOutput_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[12] = submatrixOutput_expected_prev[12];
	end
	if (
		( submatrixOutput_expected_prev[13] !== 1'bx ) && ( submatrixOutput_prev[13] !== submatrixOutput_expected_prev[13] )
		&& ((submatrixOutput_expected_prev[13] !== last_submatrixOutput_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[13] = submatrixOutput_expected_prev[13];
	end
	if (
		( submatrixOutput_expected_prev[14] !== 1'bx ) && ( submatrixOutput_prev[14] !== submatrixOutput_expected_prev[14] )
		&& ((submatrixOutput_expected_prev[14] !== last_submatrixOutput_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[14] = submatrixOutput_expected_prev[14];
	end
	if (
		( submatrixOutput_expected_prev[15] !== 1'bx ) && ( submatrixOutput_prev[15] !== submatrixOutput_expected_prev[15] )
		&& ((submatrixOutput_expected_prev[15] !== last_submatrixOutput_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixOutput[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixOutput_expected_prev);
		$display ("     Real value = %b", submatrixOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_submatrixOutput_exp[15] = submatrixOutput_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Submatrix_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg encrypted;
reg loaded;
reg processed;
reg resetN;
reg [15:0] submatrixInput;
// wires                                               
wire readyToBeEncrypted;
wire readyToBeLoaded;
wire readyToBeProcessed;
wire [15:0] submatrixOutput;

wire sampler;                             

// assign statements (if any)                          
Submatrix i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.encrypted(encrypted),
	.loaded(loaded),
	.processed(processed),
	.readyToBeEncrypted(readyToBeEncrypted),
	.readyToBeLoaded(readyToBeLoaded),
	.readyToBeProcessed(readyToBeProcessed),
	.resetN(resetN),
	.submatrixInput(submatrixInput),
	.submatrixOutput(submatrixOutput)
);

// clock
initial
begin
	clock = 1'b0;
	clock = #60000 1'b1;
	# 30000;
	repeat(15)
	begin
		clock = 1'b0;
		clock = #30000 1'b1;
		# 30000;
	end
	clock = 1'b0;
end 

// encrypted
initial
begin
	encrypted = 1'b0;
	encrypted = #360000 1'b1;
	encrypted = #120000 1'b0;
end 

// loaded
initial
begin
	loaded = 1'b0;
	loaded = #240000 1'b1;
	loaded = #120000 1'b0;
end 

// processed
initial
begin
	processed = 1'b0;
	processed = #480000 1'b1;
	processed = #120000 1'b0;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #180000 1'b1;
end 
// submatrixInput[ 15 ]
initial
begin
	submatrixInput[15] = 1'b0;
end 
// submatrixInput[ 14 ]
initial
begin
	submatrixInput[14] = 1'b0;
end 
// submatrixInput[ 13 ]
initial
begin
	submatrixInput[13] = 1'b0;
end 
// submatrixInput[ 12 ]
initial
begin
	submatrixInput[12] = 1'b0;
	submatrixInput[12] = #240000 1'b1;
	submatrixInput[12] = #120000 1'b0;
end 
// submatrixInput[ 11 ]
initial
begin
	submatrixInput[11] = 1'b0;
end 
// submatrixInput[ 10 ]
initial
begin
	submatrixInput[10] = 1'b0;
end 
// submatrixInput[ 9 ]
initial
begin
	submatrixInput[9] = 1'b0;
	submatrixInput[9] = #300000 1'b1;
	submatrixInput[9] = #60000 1'b0;
end 
// submatrixInput[ 8 ]
initial
begin
	submatrixInput[8] = 1'b0;
	submatrixInput[8] = #240000 1'b1;
	submatrixInput[8] = #60000 1'b0;
end 
// submatrixInput[ 7 ]
initial
begin
	submatrixInput[7] = 1'b0;
end 
// submatrixInput[ 6 ]
initial
begin
	submatrixInput[6] = 1'b0;
end 
// submatrixInput[ 5 ]
initial
begin
	submatrixInput[5] = 1'b0;
	submatrixInput[5] = #300000 1'b1;
	submatrixInput[5] = #60000 1'b0;
end 
// submatrixInput[ 4 ]
initial
begin
	submatrixInput[4] = 1'b0;
	submatrixInput[4] = #300000 1'b1;
	submatrixInput[4] = #60000 1'b0;
end 
// submatrixInput[ 3 ]
initial
begin
	submatrixInput[3] = 1'b0;
end 
// submatrixInput[ 2 ]
initial
begin
	submatrixInput[2] = 1'b0;
	submatrixInput[2] = #300000 1'b1;
	submatrixInput[2] = #60000 1'b0;
end 
// submatrixInput[ 1 ]
initial
begin
	submatrixInput[1] = 1'b0;
end 
// submatrixInput[ 0 ]
initial
begin
	submatrixInput[0] = 1'b0;
	submatrixInput[0] = #240000 1'b1;
	submatrixInput[0] = #60000 1'b0;
end 

Submatrix_vlg_sample_tst tb_sample (
	.clock(clock),
	.encrypted(encrypted),
	.loaded(loaded),
	.processed(processed),
	.resetN(resetN),
	.submatrixInput(submatrixInput),
	.sampler_tx(sampler)
);

Submatrix_vlg_check_tst tb_out(
	.readyToBeEncrypted(readyToBeEncrypted),
	.readyToBeLoaded(readyToBeLoaded),
	.readyToBeProcessed(readyToBeProcessed),
	.submatrixOutput(submatrixOutput),
	.sampler_rx(sampler)
);
endmodule

