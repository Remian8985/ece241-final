// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2014 15:43:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ShiftRegister
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ShiftRegister_vlg_sample_tst(
	clock,
	enable,
	loadParallelly,
	parallelLoad,
	resetN,
	resetValue,
	serialLoad,
	shiftRight,
	sampler_tx
);
input  clock;
input  enable;
input  loadParallelly;
input [15:0] parallelLoad;
input  resetN;
input [15:0] resetValue;
input  serialLoad;
input  shiftRight;
output sampler_tx;

reg sample;
time current_time;
always @(clock or enable or loadParallelly or parallelLoad or resetN or resetValue or serialLoad or shiftRight)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ShiftRegister_vlg_check_tst (
	parallelOutput,
	serialOutput,
	sampler_rx
);
input [15:0] parallelOutput;
input  serialOutput;
input sampler_rx;

reg [15:0] parallelOutput_expected;
reg  serialOutput_expected;

reg [15:0] parallelOutput_prev;
reg  serialOutput_prev;

reg [15:0] parallelOutput_expected_prev;
reg  serialOutput_expected_prev;

reg [15:0] last_parallelOutput_exp;
reg  last_serialOutput_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	parallelOutput_prev = parallelOutput;
	serialOutput_prev = serialOutput;
end

// update expected /o prevs

always @(trigger)
begin
	parallelOutput_expected_prev = parallelOutput_expected;
	serialOutput_expected_prev = serialOutput_expected;
end


// expected parallelOutput[ 15 ]
initial
begin
	parallelOutput_expected[15] = 1'bX;
end 
// expected parallelOutput[ 14 ]
initial
begin
	parallelOutput_expected[14] = 1'bX;
end 
// expected parallelOutput[ 13 ]
initial
begin
	parallelOutput_expected[13] = 1'bX;
end 
// expected parallelOutput[ 12 ]
initial
begin
	parallelOutput_expected[12] = 1'bX;
end 
// expected parallelOutput[ 11 ]
initial
begin
	parallelOutput_expected[11] = 1'bX;
end 
// expected parallelOutput[ 10 ]
initial
begin
	parallelOutput_expected[10] = 1'bX;
end 
// expected parallelOutput[ 9 ]
initial
begin
	parallelOutput_expected[9] = 1'bX;
end 
// expected parallelOutput[ 8 ]
initial
begin
	parallelOutput_expected[8] = 1'bX;
end 
// expected parallelOutput[ 7 ]
initial
begin
	parallelOutput_expected[7] = 1'bX;
end 
// expected parallelOutput[ 6 ]
initial
begin
	parallelOutput_expected[6] = 1'bX;
end 
// expected parallelOutput[ 5 ]
initial
begin
	parallelOutput_expected[5] = 1'bX;
end 
// expected parallelOutput[ 4 ]
initial
begin
	parallelOutput_expected[4] = 1'bX;
end 
// expected parallelOutput[ 3 ]
initial
begin
	parallelOutput_expected[3] = 1'bX;
end 
// expected parallelOutput[ 2 ]
initial
begin
	parallelOutput_expected[2] = 1'bX;
end 
// expected parallelOutput[ 1 ]
initial
begin
	parallelOutput_expected[1] = 1'bX;
end 
// expected parallelOutput[ 0 ]
initial
begin
	parallelOutput_expected[0] = 1'bX;
end 

// expected serialOutput
initial
begin
	serialOutput_expected = 1'bX;
end 
// generate trigger
always @(parallelOutput_expected or parallelOutput or serialOutput_expected or serialOutput)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected parallelOutput = %b | expected serialOutput = %b | ",parallelOutput_expected_prev,serialOutput_expected_prev);
	$display("| real parallelOutput = %b | real serialOutput = %b | ",parallelOutput_prev,serialOutput_prev);
`endif
	if (
		( parallelOutput_expected_prev[0] !== 1'bx ) && ( parallelOutput_prev[0] !== parallelOutput_expected_prev[0] )
		&& ((parallelOutput_expected_prev[0] !== last_parallelOutput_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[0] = parallelOutput_expected_prev[0];
	end
	if (
		( parallelOutput_expected_prev[1] !== 1'bx ) && ( parallelOutput_prev[1] !== parallelOutput_expected_prev[1] )
		&& ((parallelOutput_expected_prev[1] !== last_parallelOutput_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[1] = parallelOutput_expected_prev[1];
	end
	if (
		( parallelOutput_expected_prev[2] !== 1'bx ) && ( parallelOutput_prev[2] !== parallelOutput_expected_prev[2] )
		&& ((parallelOutput_expected_prev[2] !== last_parallelOutput_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[2] = parallelOutput_expected_prev[2];
	end
	if (
		( parallelOutput_expected_prev[3] !== 1'bx ) && ( parallelOutput_prev[3] !== parallelOutput_expected_prev[3] )
		&& ((parallelOutput_expected_prev[3] !== last_parallelOutput_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[3] = parallelOutput_expected_prev[3];
	end
	if (
		( parallelOutput_expected_prev[4] !== 1'bx ) && ( parallelOutput_prev[4] !== parallelOutput_expected_prev[4] )
		&& ((parallelOutput_expected_prev[4] !== last_parallelOutput_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[4] = parallelOutput_expected_prev[4];
	end
	if (
		( parallelOutput_expected_prev[5] !== 1'bx ) && ( parallelOutput_prev[5] !== parallelOutput_expected_prev[5] )
		&& ((parallelOutput_expected_prev[5] !== last_parallelOutput_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[5] = parallelOutput_expected_prev[5];
	end
	if (
		( parallelOutput_expected_prev[6] !== 1'bx ) && ( parallelOutput_prev[6] !== parallelOutput_expected_prev[6] )
		&& ((parallelOutput_expected_prev[6] !== last_parallelOutput_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[6] = parallelOutput_expected_prev[6];
	end
	if (
		( parallelOutput_expected_prev[7] !== 1'bx ) && ( parallelOutput_prev[7] !== parallelOutput_expected_prev[7] )
		&& ((parallelOutput_expected_prev[7] !== last_parallelOutput_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[7] = parallelOutput_expected_prev[7];
	end
	if (
		( parallelOutput_expected_prev[8] !== 1'bx ) && ( parallelOutput_prev[8] !== parallelOutput_expected_prev[8] )
		&& ((parallelOutput_expected_prev[8] !== last_parallelOutput_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[8] = parallelOutput_expected_prev[8];
	end
	if (
		( parallelOutput_expected_prev[9] !== 1'bx ) && ( parallelOutput_prev[9] !== parallelOutput_expected_prev[9] )
		&& ((parallelOutput_expected_prev[9] !== last_parallelOutput_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[9] = parallelOutput_expected_prev[9];
	end
	if (
		( parallelOutput_expected_prev[10] !== 1'bx ) && ( parallelOutput_prev[10] !== parallelOutput_expected_prev[10] )
		&& ((parallelOutput_expected_prev[10] !== last_parallelOutput_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[10] = parallelOutput_expected_prev[10];
	end
	if (
		( parallelOutput_expected_prev[11] !== 1'bx ) && ( parallelOutput_prev[11] !== parallelOutput_expected_prev[11] )
		&& ((parallelOutput_expected_prev[11] !== last_parallelOutput_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[11] = parallelOutput_expected_prev[11];
	end
	if (
		( parallelOutput_expected_prev[12] !== 1'bx ) && ( parallelOutput_prev[12] !== parallelOutput_expected_prev[12] )
		&& ((parallelOutput_expected_prev[12] !== last_parallelOutput_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[12] = parallelOutput_expected_prev[12];
	end
	if (
		( parallelOutput_expected_prev[13] !== 1'bx ) && ( parallelOutput_prev[13] !== parallelOutput_expected_prev[13] )
		&& ((parallelOutput_expected_prev[13] !== last_parallelOutput_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[13] = parallelOutput_expected_prev[13];
	end
	if (
		( parallelOutput_expected_prev[14] !== 1'bx ) && ( parallelOutput_prev[14] !== parallelOutput_expected_prev[14] )
		&& ((parallelOutput_expected_prev[14] !== last_parallelOutput_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[14] = parallelOutput_expected_prev[14];
	end
	if (
		( parallelOutput_expected_prev[15] !== 1'bx ) && ( parallelOutput_prev[15] !== parallelOutput_expected_prev[15] )
		&& ((parallelOutput_expected_prev[15] !== last_parallelOutput_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parallelOutput[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parallelOutput_expected_prev);
		$display ("     Real value = %b", parallelOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_parallelOutput_exp[15] = parallelOutput_expected_prev[15];
	end
	if (
		( serialOutput_expected_prev !== 1'bx ) && ( serialOutput_prev !== serialOutput_expected_prev )
		&& ((serialOutput_expected_prev !== last_serialOutput_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port serialOutput :: @time = %t",  $realtime);
		$display ("     Expected value = %b", serialOutput_expected_prev);
		$display ("     Real value = %b", serialOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_serialOutput_exp = serialOutput_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ShiftRegister_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg enable;
reg loadParallelly;
reg [15:0] parallelLoad;
reg resetN;
reg [15:0] resetValue;
reg serialLoad;
reg shiftRight;
// wires                                               
wire [15:0] parallelOutput;
wire serialOutput;

wire sampler;                             

// assign statements (if any)                          
ShiftRegister i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.enable(enable),
	.loadParallelly(loadParallelly),
	.parallelLoad(parallelLoad),
	.parallelOutput(parallelOutput),
	.resetN(resetN),
	.resetValue(resetValue),
	.serialLoad(serialLoad),
	.serialOutput(serialOutput),
	.shiftRight(shiftRight)
);

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #190000 1'b1;
end 

// loadParallelly
initial
begin
	loadParallelly = 1'b0;
	loadParallelly = #170000 1'b1;
	loadParallelly = #80000 1'b0;
	loadParallelly = #210000 1'b1;
	loadParallelly = #90000 1'b0;
end 
// parallelLoad[ 15 ]
initial
begin
	parallelLoad[15] = 1'b0;
end 
// parallelLoad[ 14 ]
initial
begin
	parallelLoad[14] = 1'b0;
	parallelLoad[14] = #180000 1'b1;
	parallelLoad[14] = #200000 1'b0;
end 
// parallelLoad[ 13 ]
initial
begin
	parallelLoad[13] = 1'b0;
	parallelLoad[13] = #180000 1'b1;
	parallelLoad[13] = #200000 1'b0;
end 
// parallelLoad[ 12 ]
initial
begin
	parallelLoad[12] = 1'b0;
	parallelLoad[12] = #480000 1'b1;
	parallelLoad[12] = #160000 1'b0;
end 
// parallelLoad[ 11 ]
initial
begin
	parallelLoad[11] = 1'b0;
	parallelLoad[11] = #180000 1'b1;
	parallelLoad[11] = #200000 1'b0;
end 
// parallelLoad[ 10 ]
initial
begin
	parallelLoad[10] = 1'b0;
end 
// parallelLoad[ 9 ]
initial
begin
	parallelLoad[9] = 1'b0;
	parallelLoad[9] = #180000 1'b1;
	parallelLoad[9] = #200000 1'b0;
	parallelLoad[9] = #100000 1'b1;
	parallelLoad[9] = #160000 1'b0;
end 
// parallelLoad[ 8 ]
initial
begin
	parallelLoad[8] = 1'b0;
	parallelLoad[8] = #180000 1'b1;
	parallelLoad[8] = #200000 1'b0;
end 
// parallelLoad[ 7 ]
initial
begin
	parallelLoad[7] = 1'b0;
	parallelLoad[7] = #180000 1'b1;
	parallelLoad[7] = #200000 1'b0;
	parallelLoad[7] = #100000 1'b1;
	parallelLoad[7] = #160000 1'b0;
end 
// parallelLoad[ 6 ]
initial
begin
	parallelLoad[6] = 1'b0;
	parallelLoad[6] = #180000 1'b1;
	parallelLoad[6] = #200000 1'b0;
end 
// parallelLoad[ 5 ]
initial
begin
	parallelLoad[5] = 1'b0;
end 
// parallelLoad[ 4 ]
initial
begin
	parallelLoad[4] = 1'b0;
	parallelLoad[4] = #180000 1'b1;
	parallelLoad[4] = #200000 1'b0;
end 
// parallelLoad[ 3 ]
initial
begin
	parallelLoad[3] = 1'b0;
	parallelLoad[3] = #180000 1'b1;
	parallelLoad[3] = #200000 1'b0;
	parallelLoad[3] = #100000 1'b1;
	parallelLoad[3] = #160000 1'b0;
end 
// parallelLoad[ 2 ]
initial
begin
	parallelLoad[2] = 1'b0;
	parallelLoad[2] = #180000 1'b1;
	parallelLoad[2] = #200000 1'b0;
end 
// parallelLoad[ 1 ]
initial
begin
	parallelLoad[1] = 1'b0;
	parallelLoad[1] = #180000 1'b1;
	parallelLoad[1] = #200000 1'b0;
	parallelLoad[1] = #100000 1'b1;
	parallelLoad[1] = #160000 1'b0;
end 
// parallelLoad[ 0 ]
initial
begin
	parallelLoad[0] = 1'b0;
	parallelLoad[0] = #180000 1'b1;
	parallelLoad[0] = #200000 1'b0;
	parallelLoad[0] = #100000 1'b1;
	parallelLoad[0] = #160000 1'b0;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #180000 1'b1;
	resetN = #490000 1'b0;
	resetN = #110000 1'b1;
end 
// resetValue[ 15 ]
initial
begin
	resetValue[15] = 1'b0;
	resetValue[15] = #680000 1'b1;
	resetValue[15] = #140000 1'b0;
end 
// resetValue[ 14 ]
initial
begin
	resetValue[14] = 1'b0;
	resetValue[14] = #680000 1'b1;
	resetValue[14] = #140000 1'b0;
end 
// resetValue[ 13 ]
initial
begin
	resetValue[13] = 1'b0;
	resetValue[13] = #680000 1'b1;
	resetValue[13] = #140000 1'b0;
end 
// resetValue[ 12 ]
initial
begin
	resetValue[12] = 1'b0;
end 
// resetValue[ 11 ]
initial
begin
	resetValue[11] = 1'b0;
end 
// resetValue[ 10 ]
initial
begin
	resetValue[10] = 1'b0;
end 
// resetValue[ 9 ]
initial
begin
	resetValue[9] = 1'b0;
end 
// resetValue[ 8 ]
initial
begin
	resetValue[8] = 1'b0;
end 
// resetValue[ 7 ]
initial
begin
	resetValue[7] = 1'b0;
end 
// resetValue[ 6 ]
initial
begin
	resetValue[6] = 1'b0;
end 
// resetValue[ 5 ]
initial
begin
	resetValue[5] = 1'b0;
end 
// resetValue[ 4 ]
initial
begin
	resetValue[4] = 1'b0;
end 
// resetValue[ 3 ]
initial
begin
	resetValue[3] = 1'b0;
end 
// resetValue[ 2 ]
initial
begin
	resetValue[2] = 1'b0;
end 
// resetValue[ 1 ]
initial
begin
	resetValue[1] = 1'b0;
end 
// resetValue[ 0 ]
initial
begin
	resetValue[0] = 1'b0;
end 

// serialLoad
initial
begin
	serialLoad = 1'b0;
	serialLoad = #60000 1'b1;
	serialLoad = #30000 1'b0;
	serialLoad = #30000 1'b1;
	serialLoad = #120000 1'b0;
	serialLoad = #180000 1'b1;
	serialLoad = #150000 1'b0;
	serialLoad = #120000 1'b1;
	serialLoad = #30000 1'b0;
	serialLoad = #30000 1'b1;
	serialLoad = #30000 1'b0;
	serialLoad = #30000 1'b1;
	serialLoad = #30000 1'b0;
	serialLoad = #30000 1'b1;
	serialLoad = #30000 1'b0;
	serialLoad = #60000 1'b1;
end 

// shiftRight
initial
begin
	shiftRight = 1'b0;
end 

ShiftRegister_vlg_sample_tst tb_sample (
	.clock(clock),
	.enable(enable),
	.loadParallelly(loadParallelly),
	.parallelLoad(parallelLoad),
	.resetN(resetN),
	.resetValue(resetValue),
	.serialLoad(serialLoad),
	.shiftRight(shiftRight),
	.sampler_tx(sampler)
);

ShiftRegister_vlg_check_tst tb_out(
	.parallelOutput(parallelOutput),
	.serialOutput(serialOutput),
	.sampler_rx(sampler)
);
endmodule

