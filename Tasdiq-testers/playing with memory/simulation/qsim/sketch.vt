// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2014 23:57:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sketch
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sketch_vlg_sample_tst(
	CLOCK_50,
	KEY,
	SW,
	sampler_tx
);
input  CLOCK_50;
input [3:0] KEY;
input [17:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or KEY or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sketch_vlg_check_tst (
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	VGA_B,
	VGA_BLANK,
	VGA_CLK,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_SYNC,
	VGA_VS,
	sampler_rx
);
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input [9:0] VGA_B;
input  VGA_BLANK;
input  VGA_CLK;
input [9:0] VGA_G;
input  VGA_HS;
input [9:0] VGA_R;
input  VGA_SYNC;
input  VGA_VS;
input sampler_rx;

reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;
reg [9:0] VGA_B_expected;
reg  VGA_BLANK_expected;
reg  VGA_CLK_expected;
reg [9:0] VGA_G_expected;
reg  VGA_HS_expected;
reg [9:0] VGA_R_expected;
reg  VGA_SYNC_expected;
reg  VGA_VS_expected;

reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;
reg [9:0] VGA_B_prev;
reg  VGA_BLANK_prev;
reg  VGA_CLK_prev;
reg [9:0] VGA_G_prev;
reg  VGA_HS_prev;
reg [9:0] VGA_R_prev;
reg  VGA_SYNC_prev;
reg  VGA_VS_prev;

reg [9:0] VGA_G_expected_prev;
reg [9:0] VGA_R_expected_prev;

reg [9:0] last_VGA_G_exp;
reg [9:0] last_VGA_R_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	VGA_B_prev = VGA_B;
	VGA_BLANK_prev = VGA_BLANK;
	VGA_CLK_prev = VGA_CLK;
	VGA_G_prev = VGA_G;
	VGA_HS_prev = VGA_HS;
	VGA_R_prev = VGA_R;
	VGA_SYNC_prev = VGA_SYNC;
	VGA_VS_prev = VGA_VS;
end

// update expected /o prevs

always @(trigger)
begin
	VGA_G_expected_prev = VGA_G_expected;
	VGA_R_expected_prev = VGA_R_expected;
end


// expected VGA_R[ 9 ]
initial
begin
	VGA_R_expected[9] = 1'bX;
end 
// expected VGA_R[ 8 ]
initial
begin
	VGA_R_expected[8] = 1'bX;
end 
// expected VGA_R[ 7 ]
initial
begin
	VGA_R_expected[7] = 1'bX;
end 
// expected VGA_R[ 6 ]
initial
begin
	VGA_R_expected[6] = 1'bX;
end 
// expected VGA_R[ 5 ]
initial
begin
	VGA_R_expected[5] = 1'bX;
end 
// expected VGA_R[ 4 ]
initial
begin
	VGA_R_expected[4] = 1'bX;
end 
// expected VGA_R[ 3 ]
initial
begin
	VGA_R_expected[3] = 1'bX;
end 
// expected VGA_R[ 2 ]
initial
begin
	VGA_R_expected[2] = 1'bX;
end 
// expected VGA_R[ 1 ]
initial
begin
	VGA_R_expected[1] = 1'bX;
end 
// expected VGA_R[ 0 ]
initial
begin
	VGA_R_expected[0] = 1'bX;
end 
// expected VGA_G[ 9 ]
initial
begin
	VGA_G_expected[9] = 1'bX;
end 
// expected VGA_G[ 8 ]
initial
begin
	VGA_G_expected[8] = 1'bX;
end 
// expected VGA_G[ 7 ]
initial
begin
	VGA_G_expected[7] = 1'bX;
end 
// expected VGA_G[ 6 ]
initial
begin
	VGA_G_expected[6] = 1'bX;
end 
// expected VGA_G[ 5 ]
initial
begin
	VGA_G_expected[5] = 1'bX;
end 
// expected VGA_G[ 4 ]
initial
begin
	VGA_G_expected[4] = 1'bX;
end 
// expected VGA_G[ 3 ]
initial
begin
	VGA_G_expected[3] = 1'bX;
end 
// expected VGA_G[ 2 ]
initial
begin
	VGA_G_expected[2] = 1'bX;
end 
// expected VGA_G[ 1 ]
initial
begin
	VGA_G_expected[1] = 1'bX;
end 
// expected VGA_G[ 0 ]
initial
begin
	VGA_G_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or VGA_B_expected or VGA_B or VGA_BLANK_expected or VGA_BLANK or VGA_CLK_expected or VGA_CLK or VGA_G_expected or VGA_G or VGA_HS_expected or VGA_HS or VGA_R_expected or VGA_R or VGA_SYNC_expected or VGA_SYNC or VGA_VS_expected or VGA_VS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected VGA_B = %b | expected VGA_BLANK = %b | expected VGA_CLK = %b | expected VGA_G = %b | expected VGA_HS = %b | expected VGA_R = %b | expected VGA_SYNC = %b | expected VGA_VS = %b | ",HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,VGA_B_expected_prev,VGA_BLANK_expected_prev,VGA_CLK_expected_prev,VGA_G_expected_prev,VGA_HS_expected_prev,VGA_R_expected_prev,VGA_SYNC_expected_prev,VGA_VS_expected_prev);
	$display("| real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real VGA_B = %b | real VGA_BLANK = %b | real VGA_CLK = %b | real VGA_G = %b | real VGA_HS = %b | real VGA_R = %b | real VGA_SYNC = %b | real VGA_VS = %b | ",HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,VGA_B_prev,VGA_BLANK_prev,VGA_CLK_prev,VGA_G_prev,VGA_HS_prev,VGA_R_prev,VGA_SYNC_prev,VGA_VS_prev);
`endif
	if (
		( VGA_G_expected_prev[0] !== 1'bx ) && ( VGA_G_prev[0] !== VGA_G_expected_prev[0] )
		&& ((VGA_G_expected_prev[0] !== last_VGA_G_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[0] = VGA_G_expected_prev[0];
	end
	if (
		( VGA_G_expected_prev[1] !== 1'bx ) && ( VGA_G_prev[1] !== VGA_G_expected_prev[1] )
		&& ((VGA_G_expected_prev[1] !== last_VGA_G_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[1] = VGA_G_expected_prev[1];
	end
	if (
		( VGA_G_expected_prev[2] !== 1'bx ) && ( VGA_G_prev[2] !== VGA_G_expected_prev[2] )
		&& ((VGA_G_expected_prev[2] !== last_VGA_G_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[2] = VGA_G_expected_prev[2];
	end
	if (
		( VGA_G_expected_prev[3] !== 1'bx ) && ( VGA_G_prev[3] !== VGA_G_expected_prev[3] )
		&& ((VGA_G_expected_prev[3] !== last_VGA_G_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[3] = VGA_G_expected_prev[3];
	end
	if (
		( VGA_G_expected_prev[4] !== 1'bx ) && ( VGA_G_prev[4] !== VGA_G_expected_prev[4] )
		&& ((VGA_G_expected_prev[4] !== last_VGA_G_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[4] = VGA_G_expected_prev[4];
	end
	if (
		( VGA_G_expected_prev[5] !== 1'bx ) && ( VGA_G_prev[5] !== VGA_G_expected_prev[5] )
		&& ((VGA_G_expected_prev[5] !== last_VGA_G_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[5] = VGA_G_expected_prev[5];
	end
	if (
		( VGA_G_expected_prev[6] !== 1'bx ) && ( VGA_G_prev[6] !== VGA_G_expected_prev[6] )
		&& ((VGA_G_expected_prev[6] !== last_VGA_G_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[6] = VGA_G_expected_prev[6];
	end
	if (
		( VGA_G_expected_prev[7] !== 1'bx ) && ( VGA_G_prev[7] !== VGA_G_expected_prev[7] )
		&& ((VGA_G_expected_prev[7] !== last_VGA_G_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[7] = VGA_G_expected_prev[7];
	end
	if (
		( VGA_G_expected_prev[8] !== 1'bx ) && ( VGA_G_prev[8] !== VGA_G_expected_prev[8] )
		&& ((VGA_G_expected_prev[8] !== last_VGA_G_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[8] = VGA_G_expected_prev[8];
	end
	if (
		( VGA_G_expected_prev[9] !== 1'bx ) && ( VGA_G_prev[9] !== VGA_G_expected_prev[9] )
		&& ((VGA_G_expected_prev[9] !== last_VGA_G_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_VGA_G_exp[9] = VGA_G_expected_prev[9];
	end
	if (
		( VGA_R_expected_prev[0] !== 1'bx ) && ( VGA_R_prev[0] !== VGA_R_expected_prev[0] )
		&& ((VGA_R_expected_prev[0] !== last_VGA_R_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[0] = VGA_R_expected_prev[0];
	end
	if (
		( VGA_R_expected_prev[1] !== 1'bx ) && ( VGA_R_prev[1] !== VGA_R_expected_prev[1] )
		&& ((VGA_R_expected_prev[1] !== last_VGA_R_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[1] = VGA_R_expected_prev[1];
	end
	if (
		( VGA_R_expected_prev[2] !== 1'bx ) && ( VGA_R_prev[2] !== VGA_R_expected_prev[2] )
		&& ((VGA_R_expected_prev[2] !== last_VGA_R_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[2] = VGA_R_expected_prev[2];
	end
	if (
		( VGA_R_expected_prev[3] !== 1'bx ) && ( VGA_R_prev[3] !== VGA_R_expected_prev[3] )
		&& ((VGA_R_expected_prev[3] !== last_VGA_R_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[3] = VGA_R_expected_prev[3];
	end
	if (
		( VGA_R_expected_prev[4] !== 1'bx ) && ( VGA_R_prev[4] !== VGA_R_expected_prev[4] )
		&& ((VGA_R_expected_prev[4] !== last_VGA_R_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[4] = VGA_R_expected_prev[4];
	end
	if (
		( VGA_R_expected_prev[5] !== 1'bx ) && ( VGA_R_prev[5] !== VGA_R_expected_prev[5] )
		&& ((VGA_R_expected_prev[5] !== last_VGA_R_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[5] = VGA_R_expected_prev[5];
	end
	if (
		( VGA_R_expected_prev[6] !== 1'bx ) && ( VGA_R_prev[6] !== VGA_R_expected_prev[6] )
		&& ((VGA_R_expected_prev[6] !== last_VGA_R_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[6] = VGA_R_expected_prev[6];
	end
	if (
		( VGA_R_expected_prev[7] !== 1'bx ) && ( VGA_R_prev[7] !== VGA_R_expected_prev[7] )
		&& ((VGA_R_expected_prev[7] !== last_VGA_R_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[7] = VGA_R_expected_prev[7];
	end
	if (
		( VGA_R_expected_prev[8] !== 1'bx ) && ( VGA_R_prev[8] !== VGA_R_expected_prev[8] )
		&& ((VGA_R_expected_prev[8] !== last_VGA_R_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[8] = VGA_R_expected_prev[8];
	end
	if (
		( VGA_R_expected_prev[9] !== 1'bx ) && ( VGA_R_prev[9] !== VGA_R_expected_prev[9] )
		&& ((VGA_R_expected_prev[9] !== last_VGA_R_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_VGA_R_exp[9] = VGA_R_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sketch_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [3:0] KEY;
reg [17:0] SW;
// wires                                               
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire [9:0] VGA_B;
wire VGA_BLANK;
wire VGA_CLK;
wire [9:0] VGA_G;
wire VGA_HS;
wire [9:0] VGA_R;
wire VGA_SYNC;
wire VGA_VS;

wire sampler;                             

// assign statements (if any)                          
sketch i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY(KEY),
	.SW(SW),
	.VGA_B(VGA_B),
	.VGA_BLANK(VGA_BLANK),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC(VGA_SYNC),
	.VGA_VS(VGA_VS)
);

// CLOCK_50
initial
begin
	CLOCK_50 = 1'b0;
end 

// SW[17]
initial
begin
	SW[17] = 1'b0;
end 

// SW[16]
initial
begin
	SW[16] = 1'b0;
end 

// SW[15]
initial
begin
	SW[15] = 1'b0;
end 

// SW[7]
initial
begin
	SW[7] = 1'b0;
end 

// SW[6]
initial
begin
	SW[6] = 1'b1;
end 

// SW[5]
initial
begin
	SW[5] = 1'b1;
end 

// SW[4]
initial
begin
	SW[4] = 1'b1;
end 

// SW[3]
initial
begin
	SW[3] = 1'b1;
end 

// SW[2]
initial
begin
	SW[2] = 1'b0;
end 

// SW[1]
initial
begin
	SW[1] = 1'b1;
end 

// SW[0]
initial
begin
	SW[0] = 1'b0;
end 

// SW[14]
initial
begin
	SW[14] = 1'b0;
end 

// SW[13]
initial
begin
	SW[13] = 1'b0;
end 

// SW[12]
initial
begin
	SW[12] = 1'b1;
end 

// SW[11]
initial
begin
	SW[11] = 1'b0;
end 

// SW[10]
initial
begin
	SW[10] = 1'b1;
end 

// SW[9]
initial
begin
	SW[9] = 1'b0;
end 

// SW[8]
initial
begin
	SW[8] = 1'b0;
end 

sketch_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.SW(SW),
	.sampler_tx(sampler)
);

sketch_vlg_check_tst tb_out(
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.VGA_B(VGA_B),
	.VGA_BLANK(VGA_BLANK),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC(VGA_SYNC),
	.VGA_VS(VGA_VS),
	.sampler_rx(sampler)
);
endmodule

