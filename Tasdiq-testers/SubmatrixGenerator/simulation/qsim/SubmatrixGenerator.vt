// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2014 21:39:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SubmatrixGenerator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SubmatrixGenerator_vlg_sample_tst(
	clock,
	readyToBeLoaded,
	resetN,
	userEnable,
	sampler_tx
);
input  clock;
input  readyToBeLoaded;
input  resetN;
input  userEnable;
output sampler_tx;

reg sample;
time current_time;
always @(clock or readyToBeLoaded or resetN or userEnable)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SubmatrixGenerator_vlg_check_tst (
	addressTest,
	elementTest,
	enableTest,
	loaded,
	submatrixElements,
	sampler_rx
);
input [15:0] addressTest;
input  elementTest;
input  enableTest;
input  loaded;
input [15:0] submatrixElements;
input sampler_rx;

reg [15:0] addressTest_expected;
reg  elementTest_expected;
reg  enableTest_expected;
reg  loaded_expected;
reg [15:0] submatrixElements_expected;

reg [15:0] addressTest_prev;
reg  elementTest_prev;
reg  enableTest_prev;
reg  loaded_prev;
reg [15:0] submatrixElements_prev;

reg [15:0] addressTest_expected_prev;
reg  elementTest_expected_prev;
reg  loaded_expected_prev;
reg [15:0] submatrixElements_expected_prev;

reg [15:0] last_addressTest_exp;
reg  last_elementTest_exp;
reg  last_loaded_exp;
reg [15:0] last_submatrixElements_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	addressTest_prev = addressTest;
	elementTest_prev = elementTest;
	enableTest_prev = enableTest;
	loaded_prev = loaded;
	submatrixElements_prev = submatrixElements;
end

// update expected /o prevs

always @(trigger)
begin
	addressTest_expected_prev = addressTest_expected;
	elementTest_expected_prev = elementTest_expected;
	loaded_expected_prev = loaded_expected;
	submatrixElements_expected_prev = submatrixElements_expected;
end


// expected submatrixElements[ 15 ]
initial
begin
	submatrixElements_expected[15] = 1'bX;
end 
// expected submatrixElements[ 14 ]
initial
begin
	submatrixElements_expected[14] = 1'bX;
end 
// expected submatrixElements[ 13 ]
initial
begin
	submatrixElements_expected[13] = 1'bX;
end 
// expected submatrixElements[ 12 ]
initial
begin
	submatrixElements_expected[12] = 1'bX;
end 
// expected submatrixElements[ 11 ]
initial
begin
	submatrixElements_expected[11] = 1'bX;
end 
// expected submatrixElements[ 10 ]
initial
begin
	submatrixElements_expected[10] = 1'bX;
end 
// expected submatrixElements[ 9 ]
initial
begin
	submatrixElements_expected[9] = 1'bX;
end 
// expected submatrixElements[ 8 ]
initial
begin
	submatrixElements_expected[8] = 1'bX;
end 
// expected submatrixElements[ 7 ]
initial
begin
	submatrixElements_expected[7] = 1'bX;
end 
// expected submatrixElements[ 6 ]
initial
begin
	submatrixElements_expected[6] = 1'bX;
end 
// expected submatrixElements[ 5 ]
initial
begin
	submatrixElements_expected[5] = 1'bX;
end 
// expected submatrixElements[ 4 ]
initial
begin
	submatrixElements_expected[4] = 1'bX;
end 
// expected submatrixElements[ 3 ]
initial
begin
	submatrixElements_expected[3] = 1'bX;
end 
// expected submatrixElements[ 2 ]
initial
begin
	submatrixElements_expected[2] = 1'bX;
end 
// expected submatrixElements[ 1 ]
initial
begin
	submatrixElements_expected[1] = 1'bX;
end 
// expected submatrixElements[ 0 ]
initial
begin
	submatrixElements_expected[0] = 1'bX;
end 

// expected loaded
initial
begin
	loaded_expected = 1'bX;
end 
// expected addressTest[ 15 ]
initial
begin
	addressTest_expected[15] = 1'bX;
end 
// expected addressTest[ 14 ]
initial
begin
	addressTest_expected[14] = 1'bX;
end 
// expected addressTest[ 13 ]
initial
begin
	addressTest_expected[13] = 1'bX;
end 
// expected addressTest[ 12 ]
initial
begin
	addressTest_expected[12] = 1'bX;
end 
// expected addressTest[ 11 ]
initial
begin
	addressTest_expected[11] = 1'bX;
end 
// expected addressTest[ 10 ]
initial
begin
	addressTest_expected[10] = 1'bX;
end 
// expected addressTest[ 9 ]
initial
begin
	addressTest_expected[9] = 1'bX;
end 
// expected addressTest[ 8 ]
initial
begin
	addressTest_expected[8] = 1'bX;
end 
// expected addressTest[ 7 ]
initial
begin
	addressTest_expected[7] = 1'bX;
end 
// expected addressTest[ 6 ]
initial
begin
	addressTest_expected[6] = 1'bX;
end 
// expected addressTest[ 5 ]
initial
begin
	addressTest_expected[5] = 1'bX;
end 
// expected addressTest[ 4 ]
initial
begin
	addressTest_expected[4] = 1'bX;
end 
// expected addressTest[ 3 ]
initial
begin
	addressTest_expected[3] = 1'bX;
end 
// expected addressTest[ 2 ]
initial
begin
	addressTest_expected[2] = 1'bX;
end 
// expected addressTest[ 1 ]
initial
begin
	addressTest_expected[1] = 1'bX;
end 
// expected addressTest[ 0 ]
initial
begin
	addressTest_expected[0] = 1'bX;
end 

// expected elementTest
initial
begin
	elementTest_expected = 1'bX;
end 
// generate trigger
always @(addressTest_expected or addressTest or elementTest_expected or elementTest or enableTest_expected or enableTest or loaded_expected or loaded or submatrixElements_expected or submatrixElements)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addressTest = %b | expected elementTest = %b | expected enableTest = %b | expected loaded = %b | expected submatrixElements = %b | ",addressTest_expected_prev,elementTest_expected_prev,enableTest_expected_prev,loaded_expected_prev,submatrixElements_expected_prev);
	$display("| real addressTest = %b | real elementTest = %b | real enableTest = %b | real loaded = %b | real submatrixElements = %b | ",addressTest_prev,elementTest_prev,enableTest_prev,loaded_prev,submatrixElements_prev);
`endif
	if (
		( addressTest_expected_prev[0] !== 1'bx ) && ( addressTest_prev[0] !== addressTest_expected_prev[0] )
		&& ((addressTest_expected_prev[0] !== last_addressTest_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[0] = addressTest_expected_prev[0];
	end
	if (
		( addressTest_expected_prev[1] !== 1'bx ) && ( addressTest_prev[1] !== addressTest_expected_prev[1] )
		&& ((addressTest_expected_prev[1] !== last_addressTest_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[1] = addressTest_expected_prev[1];
	end
	if (
		( addressTest_expected_prev[2] !== 1'bx ) && ( addressTest_prev[2] !== addressTest_expected_prev[2] )
		&& ((addressTest_expected_prev[2] !== last_addressTest_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[2] = addressTest_expected_prev[2];
	end
	if (
		( addressTest_expected_prev[3] !== 1'bx ) && ( addressTest_prev[3] !== addressTest_expected_prev[3] )
		&& ((addressTest_expected_prev[3] !== last_addressTest_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[3] = addressTest_expected_prev[3];
	end
	if (
		( addressTest_expected_prev[4] !== 1'bx ) && ( addressTest_prev[4] !== addressTest_expected_prev[4] )
		&& ((addressTest_expected_prev[4] !== last_addressTest_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[4] = addressTest_expected_prev[4];
	end
	if (
		( addressTest_expected_prev[5] !== 1'bx ) && ( addressTest_prev[5] !== addressTest_expected_prev[5] )
		&& ((addressTest_expected_prev[5] !== last_addressTest_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[5] = addressTest_expected_prev[5];
	end
	if (
		( addressTest_expected_prev[6] !== 1'bx ) && ( addressTest_prev[6] !== addressTest_expected_prev[6] )
		&& ((addressTest_expected_prev[6] !== last_addressTest_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[6] = addressTest_expected_prev[6];
	end
	if (
		( addressTest_expected_prev[7] !== 1'bx ) && ( addressTest_prev[7] !== addressTest_expected_prev[7] )
		&& ((addressTest_expected_prev[7] !== last_addressTest_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[7] = addressTest_expected_prev[7];
	end
	if (
		( addressTest_expected_prev[8] !== 1'bx ) && ( addressTest_prev[8] !== addressTest_expected_prev[8] )
		&& ((addressTest_expected_prev[8] !== last_addressTest_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[8] = addressTest_expected_prev[8];
	end
	if (
		( addressTest_expected_prev[9] !== 1'bx ) && ( addressTest_prev[9] !== addressTest_expected_prev[9] )
		&& ((addressTest_expected_prev[9] !== last_addressTest_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[9] = addressTest_expected_prev[9];
	end
	if (
		( addressTest_expected_prev[10] !== 1'bx ) && ( addressTest_prev[10] !== addressTest_expected_prev[10] )
		&& ((addressTest_expected_prev[10] !== last_addressTest_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[10] = addressTest_expected_prev[10];
	end
	if (
		( addressTest_expected_prev[11] !== 1'bx ) && ( addressTest_prev[11] !== addressTest_expected_prev[11] )
		&& ((addressTest_expected_prev[11] !== last_addressTest_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[11] = addressTest_expected_prev[11];
	end
	if (
		( addressTest_expected_prev[12] !== 1'bx ) && ( addressTest_prev[12] !== addressTest_expected_prev[12] )
		&& ((addressTest_expected_prev[12] !== last_addressTest_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[12] = addressTest_expected_prev[12];
	end
	if (
		( addressTest_expected_prev[13] !== 1'bx ) && ( addressTest_prev[13] !== addressTest_expected_prev[13] )
		&& ((addressTest_expected_prev[13] !== last_addressTest_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[13] = addressTest_expected_prev[13];
	end
	if (
		( addressTest_expected_prev[14] !== 1'bx ) && ( addressTest_prev[14] !== addressTest_expected_prev[14] )
		&& ((addressTest_expected_prev[14] !== last_addressTest_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[14] = addressTest_expected_prev[14];
	end
	if (
		( addressTest_expected_prev[15] !== 1'bx ) && ( addressTest_prev[15] !== addressTest_expected_prev[15] )
		&& ((addressTest_expected_prev[15] !== last_addressTest_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressTest[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressTest_expected_prev);
		$display ("     Real value = %b", addressTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressTest_exp[15] = addressTest_expected_prev[15];
	end
	if (
		( elementTest_expected_prev !== 1'bx ) && ( elementTest_prev !== elementTest_expected_prev )
		&& ((elementTest_expected_prev !== last_elementTest_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port elementTest :: @time = %t",  $realtime);
		$display ("     Expected value = %b", elementTest_expected_prev);
		$display ("     Real value = %b", elementTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_elementTest_exp = elementTest_expected_prev;
	end
	if (
		( loaded_expected_prev !== 1'bx ) && ( loaded_prev !== loaded_expected_prev )
		&& ((loaded_expected_prev !== last_loaded_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port loaded :: @time = %t",  $realtime);
		$display ("     Expected value = %b", loaded_expected_prev);
		$display ("     Real value = %b", loaded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_loaded_exp = loaded_expected_prev;
	end
	if (
		( submatrixElements_expected_prev[0] !== 1'bx ) && ( submatrixElements_prev[0] !== submatrixElements_expected_prev[0] )
		&& ((submatrixElements_expected_prev[0] !== last_submatrixElements_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[0] = submatrixElements_expected_prev[0];
	end
	if (
		( submatrixElements_expected_prev[1] !== 1'bx ) && ( submatrixElements_prev[1] !== submatrixElements_expected_prev[1] )
		&& ((submatrixElements_expected_prev[1] !== last_submatrixElements_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[1] = submatrixElements_expected_prev[1];
	end
	if (
		( submatrixElements_expected_prev[2] !== 1'bx ) && ( submatrixElements_prev[2] !== submatrixElements_expected_prev[2] )
		&& ((submatrixElements_expected_prev[2] !== last_submatrixElements_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[2] = submatrixElements_expected_prev[2];
	end
	if (
		( submatrixElements_expected_prev[3] !== 1'bx ) && ( submatrixElements_prev[3] !== submatrixElements_expected_prev[3] )
		&& ((submatrixElements_expected_prev[3] !== last_submatrixElements_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[3] = submatrixElements_expected_prev[3];
	end
	if (
		( submatrixElements_expected_prev[4] !== 1'bx ) && ( submatrixElements_prev[4] !== submatrixElements_expected_prev[4] )
		&& ((submatrixElements_expected_prev[4] !== last_submatrixElements_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[4] = submatrixElements_expected_prev[4];
	end
	if (
		( submatrixElements_expected_prev[5] !== 1'bx ) && ( submatrixElements_prev[5] !== submatrixElements_expected_prev[5] )
		&& ((submatrixElements_expected_prev[5] !== last_submatrixElements_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[5] = submatrixElements_expected_prev[5];
	end
	if (
		( submatrixElements_expected_prev[6] !== 1'bx ) && ( submatrixElements_prev[6] !== submatrixElements_expected_prev[6] )
		&& ((submatrixElements_expected_prev[6] !== last_submatrixElements_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[6] = submatrixElements_expected_prev[6];
	end
	if (
		( submatrixElements_expected_prev[7] !== 1'bx ) && ( submatrixElements_prev[7] !== submatrixElements_expected_prev[7] )
		&& ((submatrixElements_expected_prev[7] !== last_submatrixElements_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[7] = submatrixElements_expected_prev[7];
	end
	if (
		( submatrixElements_expected_prev[8] !== 1'bx ) && ( submatrixElements_prev[8] !== submatrixElements_expected_prev[8] )
		&& ((submatrixElements_expected_prev[8] !== last_submatrixElements_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[8] = submatrixElements_expected_prev[8];
	end
	if (
		( submatrixElements_expected_prev[9] !== 1'bx ) && ( submatrixElements_prev[9] !== submatrixElements_expected_prev[9] )
		&& ((submatrixElements_expected_prev[9] !== last_submatrixElements_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[9] = submatrixElements_expected_prev[9];
	end
	if (
		( submatrixElements_expected_prev[10] !== 1'bx ) && ( submatrixElements_prev[10] !== submatrixElements_expected_prev[10] )
		&& ((submatrixElements_expected_prev[10] !== last_submatrixElements_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[10] = submatrixElements_expected_prev[10];
	end
	if (
		( submatrixElements_expected_prev[11] !== 1'bx ) && ( submatrixElements_prev[11] !== submatrixElements_expected_prev[11] )
		&& ((submatrixElements_expected_prev[11] !== last_submatrixElements_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[11] = submatrixElements_expected_prev[11];
	end
	if (
		( submatrixElements_expected_prev[12] !== 1'bx ) && ( submatrixElements_prev[12] !== submatrixElements_expected_prev[12] )
		&& ((submatrixElements_expected_prev[12] !== last_submatrixElements_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[12] = submatrixElements_expected_prev[12];
	end
	if (
		( submatrixElements_expected_prev[13] !== 1'bx ) && ( submatrixElements_prev[13] !== submatrixElements_expected_prev[13] )
		&& ((submatrixElements_expected_prev[13] !== last_submatrixElements_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[13] = submatrixElements_expected_prev[13];
	end
	if (
		( submatrixElements_expected_prev[14] !== 1'bx ) && ( submatrixElements_prev[14] !== submatrixElements_expected_prev[14] )
		&& ((submatrixElements_expected_prev[14] !== last_submatrixElements_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[14] = submatrixElements_expected_prev[14];
	end
	if (
		( submatrixElements_expected_prev[15] !== 1'bx ) && ( submatrixElements_prev[15] !== submatrixElements_expected_prev[15] )
		&& ((submatrixElements_expected_prev[15] !== last_submatrixElements_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port submatrixElements[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", submatrixElements_expected_prev);
		$display ("     Real value = %b", submatrixElements_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_submatrixElements_exp[15] = submatrixElements_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SubmatrixGenerator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg readyToBeLoaded;
reg resetN;
reg userEnable;
// wires                                               
wire [15:0] addressTest;
wire elementTest;
wire enableTest;
wire loaded;
wire [15:0] submatrixElements;

wire sampler;                             

// assign statements (if any)                          
SubmatrixGenerator i1 (
// port map - connection between master ports and signals/registers   
	.addressTest(addressTest),
	.clock(clock),
	.elementTest(elementTest),
	.enableTest(enableTest),
	.loaded(loaded),
	.readyToBeLoaded(readyToBeLoaded),
	.resetN(resetN),
	.submatrixElements(submatrixElements),
	.userEnable(userEnable)
);

// resetN
initial
begin
	resetN = 1'b1;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #40000 1'b1;
	# 20000;
	repeat(23)
	begin
		clock = 1'b0;
		clock = #20000 1'b1;
		# 20000;
	end
	clock = 1'b0;
end 

// readyToBeLoaded
initial
begin
	readyToBeLoaded = 1'b1;
end 

// userEnable
initial
begin
	userEnable = 1'b0;
	userEnable = #80000 1'b1;
end 

SubmatrixGenerator_vlg_sample_tst tb_sample (
	.clock(clock),
	.readyToBeLoaded(readyToBeLoaded),
	.resetN(resetN),
	.userEnable(userEnable),
	.sampler_tx(sampler)
);

SubmatrixGenerator_vlg_check_tst tb_out(
	.addressTest(addressTest),
	.elementTest(elementTest),
	.enableTest(enableTest),
	.loaded(loaded),
	.submatrixElements(submatrixElements),
	.sampler_rx(sampler)
);
endmodule

